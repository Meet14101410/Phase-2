import json
from flask import Flask, request, jsonify, render_template_string
from datetime import datetime

app = Flask(__name__)

# Simplified in-memory database
phase2_data_store = {}

# HTML content to be served (copied from the HTML section above)
HTML_CONTENT = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Phase 2 Clinical Trial Data Entry</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 900px; margin: 2em auto; padding: 1em; border: 1px solid #ccc; border-radius: 8px; background-color: #f9f9f9; }
        h1, h2 { text-align: center; color: #333; }
        .form-section { background-color: #fff; padding: 2em; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); margin-bottom: 2em; }
        .form-group { margin-bottom: 1.5em; }
        label { display: block; margin-bottom: 0.5em; font-weight: bold; color: #555; }
        input[type="text"], input[type="number"], input[type="date"], textarea { width: 100%; padding: 10px; box-sizing: border-box; border: 1px solid #ccc; border-radius: 4px; font-size: 16px; }
        .adverse-event-container { border-top: 1px solid #eee; padding-top: 1em; margin-top: 1em; }
        .adverse-event-item { display: grid; grid-template-columns: 1fr 1fr 1fr auto; gap: 1em; align-items: center; margin-bottom: 1em; }
        .adverse-event-item input, .adverse-event-item select { flex-grow: 1; }
        .action-button { padding: 10px 15px; background-color: #007BFF; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 16px; transition: background-color 0.3s; }
        .action-button:hover { background-color: #0056b3; }
        .remove-btn { background-color: #dc3545; color: white; border: none; border-radius: 4px; cursor: pointer; padding: 10px; font-size: 16px; }
        .response-message { margin-top: 2em; padding: 1.5em; border-radius: 8px; display: none; text-align: center; }
        .success { background-color: #d4edda; color: #155724; border: 1px solid #c3e6cb; }
        .error { background-color: #f8d7da; color: #721c24; border: 1px solid #f5c6cb; }
    </style>
</head>
<body>
    <h1>Phase 2 Trial Data Capture</h1>
    <div class="form-section">
        <h2>Patient and Treatment Information</h2>
        <form id="phase2Form">
            <div class="form-group">
                <label for="patientId">Patient ID:</label>
                <input type="text" id="patientId" name="patientId" required>
            </div>
            <div class="form-group">
                <label for="trialId">Trial ID:</label>
                <input type="text" id="trialId" name="trialId" required>
            </div>
            <div class="form-group">
                <label for="randomizationArm">Randomization Arm:</label>
                <input type="text" id="randomizationArm" name="randomizationArm" placeholder="e.g., Active Drug, Placebo, Standard of Care" required>
            </div>
            
            <h2>Efficacy Endpoints</h2>
            <p>Log patient-reported outcomes or clinical efficacy data.</p>
            <div class="form-group">
                <label for="efficacyOutcome">Efficacy Outcome:</label>
                <textarea id="efficacyOutcome" name="efficacyOutcome" rows="4" placeholder="e.g., Tumor size reduction, symptom score, etc."></textarea>
            </div>

            <h2>Adverse Events (AEs)</h2>
            <p>Log any adverse events observed during this visit.</p>
            <div id="ae-container">
                <div class="adverse-event-item">
                    <input type="text" name="aeTerm" placeholder="Adverse Event Term" required>
                    <select name="severity" required>
                        <option value="">-- Severity --</option>
                        <option value="Mild">Mild</option>
                        <option value="Moderate">Moderate</option>
                        <option value="Severe">Severe</option>
                    </select>
                    <select name="relationship" required>
                        <option value="">-- Relationship to Drug --</option>
                        <option value="Related">Related</option>
                        <option value="Not Related">Not Related</option>
                    </select>
                    <button type="button" class="remove-btn">✖</button>
                </div>
            </div>
            <button type="button" id="add-ae-btn" class="action-button">Add Adverse Event</button>
            <br><br>
            <button type="submit" id="submit-data-btn" class="action-button">Submit Phase 2 Data</button>
        </form>
    </div>
    <div id="response" class="response-message"></div>

    <script>
        document.getElementById('add-ae-btn').addEventListener('click', function() {
            const container = document.getElementById('ae-container');
            const newAeItem = document.createElement('div');
            newAeItem.classList.add('adverse-event-item');
            newAeItem.innerHTML = `
                <input type="text" name="aeTerm" placeholder="Adverse Event Term" required>
                <select name="severity" required>
                    <option value="">-- Severity --</option>
                    <option value="Mild">Mild</option>
                    <option value="Moderate">Moderate</option>
                    <option value="Severe">Severe</option>
                </select>
                <select name="relationship" required>
                    <option value="">-- Relationship to Drug --</option>
                    <option value="Related">Related</option>
                    <option value="Not Related">Not Related</option>
                </select>
                <button type="button" class="remove-btn">✖</button>
            `;
            container.appendChild(newAeItem);
        });

        document.getElementById('ae-container').addEventListener('click', function(event) {
            if (event.target.classList.contains('remove-btn')) {
                event.target.closest('.adverse-event-item').remove();
            }
        });

        document.getElementById('phase2Form').addEventListener('submit', function(event) {
            event.preventDefault();
            
            const form = event.target;
            const adverseEvents = Array.from(document.querySelectorAll('.adverse-event-item')).map(item => ({
                term: item.querySelector('input[name="aeTerm"]').value,
                severity: item.querySelector('select[name="severity"]').value,
                relationship: item.querySelector('select[name="relationship"]').value
            }));
            
            const formData = {
                patientId: form.elements['patientId'].value,
                trialId: form.elements['trialId'].value,
                randomizationArm: form.elements['randomizationArm'].value,
                efficacyOutcome: form.elements['efficacyOutcome'].value,
                adverseEvents: adverseEvents
            };

            fetch('/submit-phase2', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(formData)
            })
            .then(response => response.json())
            .then(result => {
                const responseDiv = document.getElementById('response');
                responseDiv.style.display = 'block';
                if (result.status === 'success') {
                    responseDiv.className = 'response-message success';
                    responseDiv.textContent = result.message;
                    form.reset();
                } else {
                    responseDiv.className = 'response-message error';
                    responseDiv.textContent = result.message;
                }
            })
            .catch(error => {
                const responseDiv = document.getElementById('response');
                responseDiv.style.display = 'block';
                responseDiv.className = 'response-message error';
                responseDiv.textContent = 'An error occurred. Please try again.';
            });
        });
    </script>
</body>
</html>
"""

@app.route('/')
def index():
    return render_template_string(HTML_CONTENT)

@app.route('/submit-phase2', methods=['POST'])
def submit_phase2_data():
    try:
        data = request.get_json()

        # Basic validation
        required_fields = ['patientId', 'trialId', 'randomizationArm', 'efficacyOutcome']
        if not all(k in data for k in required_fields):
            return jsonify({'status': 'error', 'message': 'Missing required fields.'}), 400

        # Store the data (using patientId as the key for simplicity)
        patient_id = data['patientId']
        phase2_data_store[patient_id] = {
            'trial_id': data['trialId'],
            'randomization_arm': data['randomizationArm'],
            'efficacy_outcome': data['efficacyOutcome'],
            'adverse_events': data.get('adverseEvents', []),
            'timestamp': datetime.now().isoformat()
        }

        print(f"Data stored for Patient ID: {patient_id}")
        print(json.dumps(phase2_data_store[patient_id], indent=2))
        
        return jsonify({'status': 'success', 'message': f'Phase 2 data for patient {patient_id} submitted successfully!'})

    except Exception as e:
        print(f"An error occurred: {e}")
        return jsonify({'status': 'error', 'message': 'An internal error occurred.'}), 500

if __name__ == '__main__':
    app.run(debug=True)
